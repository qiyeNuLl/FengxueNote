栈顶指针（寄存器）：rsp
栈底指针（帧指针）：rbp

#p64：将数字转为字符串（p64/u64   p32/u32）
#remote：主要用作远程和服务器交互，返回一个类似连接对象
#send：发送数据，通过连接对象调用
#interactive：反弹shell

可以看到NX这项保护是开启的状态，这意味着：栈中数据没有执行权限，
常用的call esp或者jmp esp的方法在这里就不能使用辽，
但是可以利用rop这种方法绕过

shift + F12看一下字符串

偏移值看
stack of main（常理变量长度+8字节rbp）
其次在在到后门函数的地址长度


目前栈溢出漏洞主要的利用方式是ROP(Return Oriented Programming)，
即返回导向编程，通过栈溢出内容覆盖返回地址，
使其跳转到我们想要执行恶意代码的位置中。
而跳转的目标有可能是一段本就已经写好的可以执行恶意命令的函数，
也有可能是某个全局变量空间，甚至构造一个系统调用的cpu指令，
跳转到一个libc中的函数等。最终目的都是执行恶意命令。


ret2text原理
控制返回地址指向程序本身已有的的代码(.text)并执行


Canary机制
栈溢出保护是一种缓冲区溢出攻击缓解手段
https://blog.csdn.net/helloworlddm/article/details/106744838

地址随机化问题
栈内存上变量的地址变化，是不同的ASLR设定下的表现
ASLR，是一种针对缓冲区溢出的安全保护技术





system()
int system(const char *command)
把 command 指定的命令名称或程序名称传给要被命令处理器执行的主机环境，并在命令完成后返回。
系统命令


gets()
char *gets(char *str) 
从标准输入 stdin 读取一行，并把它存储在 str 所指向的字符串中。
当读取到换行符时，或者到达文件末尾时，它会停止



puts()
int puts(const char *str)
把一个字符串写入到标准输出 stdout，直到空字符，
但不包括空字符。换行符会被追加到输出中。










